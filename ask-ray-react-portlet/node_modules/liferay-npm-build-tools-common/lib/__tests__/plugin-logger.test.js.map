{"version":3,"sources":["../../src/__tests__/plugin-logger.test.js"],"names":["describe","log","beforeEach","info","error","it","expect","messages","toMatchSnapshot","toHtml","toString","logger","set","get","toBe","length","delete","toBeDefined"],"mappings":";;AAAA;;;;;;AAEAA,SAAS,4BAAT,EAAuC,YAAM;AAC5C,KAAIC,YAAJ;;AAEAC,YAAW,YAAM;AAChBD,QAAM,4BAAN;;AAEAA,MAAIE,IAAJ,CAAS,aAAT,EAAwB,cAAxB,EAAwC,cAAxC;AACAF,MAAIG,KAAJ,CAAU,cAAV,EAA0B,eAA1B;AACA,EALD;;AAOAC,IAAG,uBAAH,EAA4B,YAAM;AACjCC,SAAOL,IAAIM,QAAX,EAAqBC,eAArB;AACA,EAFD;;AAIAH,IAAG,8BAAH,EAAmC,YAAM;AACxCC,SAAOL,IAAIQ,MAAJ,EAAP,EAAqBD,eAArB;AACA,EAFD;;AAIAH,IAAG,8BAAH,EAAmC,YAAM;AACxCC,SAAOL,IAAIS,QAAJ,EAAP,EAAuBF,eAAvB;AACA,EAFD;AAGA,CArBD;;AAuBAR,SAAS,uCAAT,EAAkD,YAAM;AACvDK,IAAG,kDAAH,EAAuD,YAAM;AAC5D,MAAMM,SAAS,4BAAf;;AAEA,yBAAaC,GAAb,CAAiB,OAAjB,EAA0BD,MAA1B;;AAEAL,SAAO,uBAAaO,GAAb,CAAiB,OAAjB,CAAP,EAAkCC,IAAlC,CAAuCH,MAAvC;AACA,EAND;;AAQAN,IAAG,6CAAH,EAAkD,YAAM;AACvD,MAAMM,SAAS,4BAAf;;AAEA,yBAAaC,GAAb,CAAiB,OAAjB,EAA0BD,MAA1B;;AAEAA,SAAOR,IAAP,CAAY,QAAZ,EAAsB,IAAtB;;AAEAG,SAAO,uBAAaO,GAAb,CAAiB,OAAjB,EAA0BN,QAA1B,CAAmCQ,MAA1C,EAAkDD,IAAlD,CAAuD,CAAvD;;AAEA,yBAAaE,MAAb,CAAoB,OAApB;;AAEAV,SAAO,uBAAaO,GAAb,CAAiB,OAAjB,EAA0BN,QAA1B,CAAmCQ,MAA1C,EAAkDD,IAAlD,CAAuD,CAAvD;AACA,EAZD;;AAcAT,IAAG,qDAAH,EAA0D,YAAM;AAC/D,yBAAaW,MAAb,CAAoB,OAApB;;AAEAV,SAAO,uBAAaO,GAAb,CAAiB,OAAjB,CAAP,EAAkCI,WAAlC;AACA,EAJD;AAKA,CA5BD","file":"plugin-logger.test.js","sourcesContent":["import PluginLogger from '../plugin-logger';\n\ndescribe('when working with messages', () => {\n\tlet log;\n\n\tbeforeEach(() => {\n\t\tlog = new PluginLogger();\n\n\t\tlog.info('info-source', 'info-thing-1', 'info-thing-2');\n\t\tlog.error('error-source', 'error-thing-1');\n\t});\n\n\tit('stores them correctly', () => {\n\t\texpect(log.messages).toMatchSnapshot();\n\t});\n\n\tit('dumps them as HTML correctly', () => {\n\t\texpect(log.toHtml()).toMatchSnapshot();\n\t});\n\n\tit('dumps them as text correctly', () => {\n\t\texpect(log.toString()).toMatchSnapshot();\n\t});\n});\n\ndescribe('when using PlugginLogger registration', () => {\n\tit('set and gets a registered PluginLogger correctly', () => {\n\t\tconst logger = new PluginLogger();\n\n\t\tPluginLogger.set('a-key', logger);\n\n\t\texpect(PluginLogger.get('a-key')).toBe(logger);\n\t});\n\n\tit('deletes a registered PluginLogger correctly', () => {\n\t\tconst logger = new PluginLogger();\n\n\t\tPluginLogger.set('a-key', logger);\n\n\t\tlogger.info('source', 'hi');\n\n\t\texpect(PluginLogger.get('a-key').messages.length).toBe(1);\n\n\t\tPluginLogger.delete('a-key');\n\n\t\texpect(PluginLogger.get('a-key').messages.length).toBe(0);\n\t});\n\n\tit('returns a dummy logger if no loggers are registered', () => {\n\t\tPluginLogger.delete('a-key');\n\n\t\texpect(PluginLogger.get('a-key')).toBeDefined();\n\t});\n});\n"]}