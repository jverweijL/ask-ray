'use strict';

var _pluginLogger = require('../plugin-logger');

var _pluginLogger2 = _interopRequireDefault(_pluginLogger);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('when working with messages', function () {
	var log = void 0;

	beforeEach(function () {
		log = new _pluginLogger2.default();

		log.info('info-source', 'info-thing-1', 'info-thing-2');
		log.error('error-source', 'error-thing-1');
	});

	it('stores them correctly', function () {
		expect(log.messages).toMatchSnapshot();
	});

	it('dumps them as HTML correctly', function () {
		expect(log.toHtml()).toMatchSnapshot();
	});

	it('dumps them as text correctly', function () {
		expect(log.toString()).toMatchSnapshot();
	});
});

describe('when using PlugginLogger registration', function () {
	it('set and gets a registered PluginLogger correctly', function () {
		var logger = new _pluginLogger2.default();

		_pluginLogger2.default.set('a-key', logger);

		expect(_pluginLogger2.default.get('a-key')).toBe(logger);
	});

	it('deletes a registered PluginLogger correctly', function () {
		var logger = new _pluginLogger2.default();

		_pluginLogger2.default.set('a-key', logger);

		logger.info('source', 'hi');

		expect(_pluginLogger2.default.get('a-key').messages.length).toBe(1);

		_pluginLogger2.default.delete('a-key');

		expect(_pluginLogger2.default.get('a-key').messages.length).toBe(0);
	});

	it('returns a dummy logger if no loggers are registered', function () {
		_pluginLogger2.default.delete('a-key');

		expect(_pluginLogger2.default.get('a-key')).toBeDefined();
	});
});
//# sourceMappingURL=plugin-logger.test.js.map