{"version":3,"sources":["../src/packages.js"],"names":["getPackageJsonPath","getPackageDir","getPackageTargetDir","packageDirCache","modulePath","join","absModulePath","resolve","dir","found","statSync","err","dirname","Error","name","version","targetFolder","replace"],"mappings":";;;;;QAWgBA,kB,GAAAA,kB;QAUAC,a,GAAAA,a;QAsCAC,mB,GAAAA,mB;;AA3DhB;;;;AACA;;;;;;AAEA,IAAIC,kBAAkB,EAAtB;;AAEA;;;;;;AAMO,SAASH,kBAAT,CAA4BI,UAA5B,EAAwC;AAC9C,QAAO,eAAKC,IAAL,CAAUJ,cAAcG,UAAd,CAAV,EAAqC,cAArC,CAAP;AACA;;AAED;;;;;;AAMO,SAASH,aAAT,CAAuBG,UAAvB,EAAmC;AACzC,KAAIE,gBAAgB,eAAKC,OAAL,CAAaH,UAAb,CAApB;AACA,KAAII,MAAML,gBAAgBG,aAAhB,CAAV;;AAEA,KAAI,CAACE,GAAL,EAAU;AACTA,QAAMF,aAAN;AACA,MAAIG,QAAQ,KAAZ;;AAEA,SAAO,CAACA,KAAR,EAAe;AACd,OAAI;AACH,iBAAGC,QAAH,CAAY,eAAKL,IAAL,CAAUG,GAAV,EAAe,cAAf,CAAZ;AACAC,YAAQ,IAAR;AACA,IAHD,CAGE,OAAOE,GAAP,EAAY;AACb,QAAMC,UAAU,eAAKA,OAAL,CAAaJ,GAAb,CAAhB;;AAEA,QAAII,WAAWJ,GAAf,EAAoB;AACnB,WAAM,IAAIK,KAAJ,CACL,wCAAwCT,UADnC,CAAN;AAGA;;AAEDI,UAAMI,OAAN;AACA;AACD;;AAEDT,kBAAgBG,aAAhB,IAAiCE,GAAjC;AACA;;AAED,QAAOA,GAAP;AACA;;AAED;;;;;;;AAOO,SAASN,mBAAT,CAA6BY,IAA7B,EAAmD;AAAA,KAAhBC,OAAgB,uEAAN,IAAM;;AACzD,KAAIC,eAAeF,KAAKG,OAAL,CAAa,GAAb,EAAkB,KAAlB,CAAnB;;AAEA,KAAIF,OAAJ,EAAa;AACZC,wBAAoBD,OAApB;AACA;;AAED,QAAOC,YAAP;AACA","file":"packages.js","sourcesContent":["import fs from 'fs';\nimport path from 'path';\n\nlet packageDirCache = {};\n\n/**\n * Get the full path of the package.json file for a given JS module file.\n * @param {String} modulePath the relative or absolute path to a JS module file\n * @return {String} the full path to the package.json file (with native path\n *         separators)\n */\nexport function getPackageJsonPath(modulePath) {\n\treturn path.join(getPackageDir(modulePath), 'package.json');\n}\n\n/**\n * Get the full path of the package directory for a given JS module file.\n * @param {String} modulePath the relative or absolute path to a JS module file\n * @return {String} the full path to the package directory (with native path\n *         separators)\n */\nexport function getPackageDir(modulePath) {\n\tlet absModulePath = path.resolve(modulePath);\n\tlet dir = packageDirCache[absModulePath];\n\n\tif (!dir) {\n\t\tdir = absModulePath;\n\t\tlet found = false;\n\n\t\twhile (!found) {\n\t\t\ttry {\n\t\t\t\tfs.statSync(path.join(dir, 'package.json'));\n\t\t\t\tfound = true;\n\t\t\t} catch (err) {\n\t\t\t\tconst dirname = path.dirname(dir);\n\n\t\t\t\tif (dirname == dir) {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t'Cannot find package.json for file: ' + modulePath\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tdir = dirname;\n\t\t\t}\n\t\t}\n\n\t\tpackageDirCache[absModulePath] = dir;\n\t}\n\n\treturn dir;\n}\n\n/**\n * Converts a package name (optionally versioned) to its target folder name\n * inside bundled node_modules.\n * @param  {String} name a package name\n * @param  {String} [version=null] an optional package version\n * @return {String} the target folder\n */\nexport function getPackageTargetDir(name, version = null) {\n\tlet targetFolder = name.replace('/', '%2F');\n\n\tif (version) {\n\t\ttargetFolder += `@${version}`;\n\t}\n\n\treturn targetFolder;\n}\n"]}