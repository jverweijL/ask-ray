'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.getPackageJsonPath = getPackageJsonPath;
exports.getPackageDir = getPackageDir;
exports.getPackageTargetDir = getPackageTargetDir;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var packageDirCache = {};

/**
 * Get the full path of the package.json file for a given JS module file.
 * @param {String} modulePath the relative or absolute path to a JS module file
 * @return {String} the full path to the package.json file (with native path
 *         separators)
 */
function getPackageJsonPath(modulePath) {
	return _path2.default.join(getPackageDir(modulePath), 'package.json');
}

/**
 * Get the full path of the package directory for a given JS module file.
 * @param {String} modulePath the relative or absolute path to a JS module file
 * @return {String} the full path to the package directory (with native path
 *         separators)
 */
function getPackageDir(modulePath) {
	var absModulePath = _path2.default.resolve(modulePath);
	var dir = packageDirCache[absModulePath];

	if (!dir) {
		dir = absModulePath;
		var found = false;

		while (!found) {
			try {
				_fs2.default.statSync(_path2.default.join(dir, 'package.json'));
				found = true;
			} catch (err) {
				var dirname = _path2.default.dirname(dir);

				if (dirname == dir) {
					throw new Error('Cannot find package.json for file: ' + modulePath);
				}

				dir = dirname;
			}
		}

		packageDirCache[absModulePath] = dir;
	}

	return dir;
}

/**
 * Converts a package name (optionally versioned) to its target folder name
 * inside bundled node_modules.
 * @param  {String} name a package name
 * @param  {String} [version=null] an optional package version
 * @return {String} the target folder
 */
function getPackageTargetDir(name) {
	var version = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

	var targetFolder = name.replace('/', '%2F');

	if (version) {
		targetFolder += '@' + version;
	}

	return targetFolder;
}
//# sourceMappingURL=packages.js.map