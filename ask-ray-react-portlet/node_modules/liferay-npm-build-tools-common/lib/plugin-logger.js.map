{"version":3,"sources":["../src/plugin-logger.js"],"names":["PluginLogger","_msgs","source","things","push","level","reduce","str","join","global","_PluginLogger_","set","key","logger","get","file","opts","filenameRelative","delete"],"mappings":";;;;;;;;;;AAAA;;;;IAIqBA,Y;AACpB;;;AAGA,yBAAc;AAAA;;AACb,OAAKC,KAAL,GAAa,EAAb;AACA;;AAED;;;;;;;;;;uBAMKC,M,EAAmB;AAAA,qCAARC,MAAQ;AAARA,UAAQ;AAAA;;AACvB,QAAKF,KAAL,CAAWG,IAAX,CAAgB;AACfF,YAAQA,MADO;AAEfG,WAAO,MAFQ;AAGfF,YAAQA;AAHO,IAAhB;AAKA;;AAED;;;;;;;;;wBAMMD,M,EAAmB;AAAA,sCAARC,MAAQ;AAARA,UAAQ;AAAA;;AACxB,QAAKF,KAAL,CAAWG,IAAX,CAAgB;AACfF,YAAQA,MADO;AAEfG,WAAO,OAFQ;AAGfF,YAAQA;AAHO,IAAhB;AAKA;;AAED;;;;;;;;;AAQA;;;;6BAIW;AACV,UAAO,KAAKF,KAAL,CAAWK,MAAX,CACN,UAACC,GAAD;AAAA,QAAOL,MAAP,QAAOA,MAAP;AAAA,QAAeG,KAAf,QAAeA,KAAf;AAAA,QAAsBF,MAAtB,QAAsBA,MAAtB;AAAA,gBACII,GADJ,GACUL,MADV,SACoBG,KADpB,UAC8BF,OAAOK,IAAP,CAAY,GAAZ,CAD9B;AAAA,IADM,EAGN,EAHM,CAAP;AAKA;;AAED;;;;;;;2BAIS;AACR,UAAO,KAAKP,KAAL,CAAWK,MAAX,CACN,UAACC,GAAD;AAAA,QAAOL,MAAP,SAAOA,MAAP;AAAA,QAAeG,KAAf,SAAeA,KAAf;AAAA,QAAsBF,MAAtB,SAAsBA,MAAtB;AAAA,gBACII,GADJ,GACUL,MADV,SACoBG,KADpB,UAC8BF,OAAOK,IAAP,CAAY,GAAZ,CAD9B;AAAA,IADM,EAGN,EAHM,CAAP;AAKA;;;sBA1Bc;AACd,UAAO,KAAKP,KAAZ;AACA;;;;;;kBA1CmBD,Y;;;AAqErBS,OAAOC,cAAP,GAAwBD,OAAOC,cAAP,IAAyB,EAAjD;;AAEA;;;;;;;;AAQAV,aAAaW,GAAb,GAAmB,UAASC,GAAT,EAAcC,MAAd,EAAsB;AACxCJ,QAAOC,cAAP,CAAsBE,GAAtB,IAA6BC,MAA7B;AACA,CAFD;;AAIA;;;;;;;;AAQAb,aAAac,GAAb,GAAmB,UAASF,GAAT,EAAc;AAChC,KAAIA,IAAIG,IAAJ,IAAYH,IAAIG,IAAJ,CAASC,IAArB,IAA6BJ,IAAIG,IAAJ,CAASC,IAAT,CAAcC,gBAA/C,EAAiE;AAChEL,QAAMA,IAAIG,IAAJ,CAASC,IAAT,CAAcC,gBAApB;AACA;;AAED,QAAOR,OAAOC,cAAP,CAAsBE,GAAtB,KAA8B,IAAIZ,YAAJ,EAArC;AACA,CAND;;AAQA;;;;;;;AAOAA,aAAakB,MAAb,GAAsB,UAASN,GAAT,EAAc;AACnC,QAAOH,OAAOC,cAAP,CAAsBE,GAAtB,CAAP;AACA,CAFD","file":"plugin-logger.js","sourcesContent":["/**\n * An object to hold babel or liferay-npm-bundler plugin messages.\n * @type {PluginLogger}\n */\nexport default class PluginLogger {\n\t/**\n\t * Construct empty logger with no messages\n\t */\n\tconstructor() {\n\t\tthis._msgs = [];\n\t}\n\n\t/**\n\t * Log an informational message\n\t * @param {String} source the identifier for the source of the message\n\t * @param {Array} things the objects or strings to print\n\t * @return {void}\n\t */\n\tinfo(source, ...things) {\n\t\tthis._msgs.push({\n\t\t\tsource: source,\n\t\t\tlevel: 'info',\n\t\t\tthings: things,\n\t\t});\n\t}\n\n\t/**\n\t * Log an error message\n\t * @param {String} source the identifier for the source of the message\n\t * @param {Array} things the objects or strings to print\n\t * @return {void}\n\t */\n\terror(source, ...things) {\n\t\tthis._msgs.push({\n\t\t\tsource: source,\n\t\t\tlevel: 'error',\n\t\t\tthings: things,\n\t\t});\n\t}\n\n\t/**\n\t * Get the list of messages\n\t * @return {Array} an array containing one object per messages (with fields: source, level and things)\n\t */\n\tget messages() {\n\t\treturn this._msgs;\n\t}\n\n\t/**\n\t * Return a printable string representation of the messages logged till now\n\t * @return {String} a string containing one line per message\n\t */\n\ttoString() {\n\t\treturn this._msgs.reduce(\n\t\t\t(str, {source, level, things}) =>\n\t\t\t\t`${str}${source}:${level}: ${things.join(' ')}\\n`,\n\t\t\t''\n\t\t);\n\t}\n\n\t/**\n\t * Return an HTML string representation of the messages logged till now\n\t * @return {String} HTML containing one line (<br> separated) per message\n\t */\n\ttoHtml() {\n\t\treturn this._msgs.reduce(\n\t\t\t(str, {source, level, things}) =>\n\t\t\t\t`${str}${source}:${level}: ${things.join(' ')}<br>`,\n\t\t\t''\n\t\t);\n\t}\n}\n\nglobal._PluginLogger_ = global._PluginLogger_ || {};\n\n/**\n * Set the logger for a given key. This is used to pass loggers from the\n * liferay-npm-bundler core to the Babel plugins because Babel's API doesn't\n * allow any way to pass per-file custom values to plugins.\n * @param  {String} key the key to identify the logger (usually a file path)\n * @param  {PluginLogger} logger the logger\n * @return {void}\n */\nPluginLogger.set = function(key, logger) {\n\tglobal._PluginLogger_[key] = logger;\n};\n\n/**\n * Get the logger for a given key. This is used to pass loggers from the\n * liferay-npm-bundler core to the Babel plugins because Babel's API doesn't\n * allow any way to pass per-file custom values to plugins.\n * @param  {String|Object} key the key to identify the logger (usually a file path). You can also pass the state object\n *  \t\t\t\t\t\t   passed to Babel plugins and it will be automatically dereferenced.\n * @return {PluginLogger} the logger\n */\nPluginLogger.get = function(key) {\n\tif (key.file && key.file.opts && key.file.opts.filenameRelative) {\n\t\tkey = key.file.opts.filenameRelative;\n\t}\n\n\treturn global._PluginLogger_[key] || new PluginLogger();\n};\n\n/**\n * Delete the logger for a given key. This is used to pass loggers from the\n * liferay-npm-bundler core to the Babel plugins because Babel's API doesn't\n * allow any way to pass per-file custom values to plugins.\n * @param  {String} key the key to identify the logger (usually a file path)\n * @return {void}\n */\nPluginLogger.delete = function(key) {\n\tdelete global._PluginLogger_[key];\n};\n"]}