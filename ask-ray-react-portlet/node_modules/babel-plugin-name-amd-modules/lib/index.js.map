{"version":3,"sources":["../src/index.js"],"names":["t","types","nameVisitor","ExpressionStatement","path","opts","node","expression","isCallExpression","callee","isIdentifier","name","args","arguments","insertName","unshiftName","length","isFunctionExpression","isArrayExpression","isStringLiteral","packageName","getPackageName","filenameRelative","moduleName","getModuleName","getSrcPrefixes","fullModuleName","unshift","stringLiteral","value","log","info","stop","visitor","Program","exit","state","traverse","file","get","pkgs","srcPrefixes","map","normalize","srcPrefix","endsWith","sep","pkgJsonPath","getPackageJsonPath","pkgJson","version","filenameAbsolute","resolve","pkgDir","getPackageDir","substring","toLowerCase","i","startsWith","replace"],"mappings":"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","file":"index.js","sourcesContent":["import * as pkgs from 'liferay-npm-build-tools-common/lib/packages';\nimport PluginLogger from 'liferay-npm-build-tools-common/lib/plugin-logger';\nimport path from 'path';\nimport readJsonSync from 'read-json-sync';\n\n/**\n * Valid babel plugin options are:\n *\t  packageName: '<package.json>'\n *    srcPrefixes: ['src/main/resources/META-INF/resources']\n * @return {object} a babel visitor\n */\nexport default function({types: t}) {\n\tconst nameVisitor = {\n\t\tExpressionStatement(path, {opts}) {\n\t\t\tconst node = path.node;\n\t\t\tconst expression = node.expression;\n\n\t\t\tif (t.isCallExpression(expression)) {\n\t\t\t\tconst callee = expression.callee;\n\n\t\t\t\tif (t.isIdentifier(callee, {name: 'define'})) {\n\t\t\t\t\tconst args = expression.arguments;\n\n\t\t\t\t\tlet insertName = false;\n\t\t\t\t\tlet unshiftName = true;\n\n\t\t\t\t\tswitch (args.length) {\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tinsertName = t.isFunctionExpression(args[0]);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\tinsertName =\n\t\t\t\t\t\t\t\tt.isArrayExpression(args[0]) &&\n\t\t\t\t\t\t\t\tt.isFunctionExpression(args[1]);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\tunshiftName = false;\n\t\t\t\t\t\tinsertName =\n\t\t\t\t\t\t\t\tt.isStringLiteral(args[0]) &&\n\t\t\t\t\t\t\t\tt.isArrayExpression(args[1]) &&\n\t\t\t\t\t\t\t\tt.isFunctionExpression(args[2]);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (insertName) {\n\t\t\t\t\t\tconst packageName = getPackageName(\n\t\t\t\t\t\t\tthis.opts.packageName,\n\t\t\t\t\t\t\tthis.filenameRelative\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tconst moduleName = getModuleName(\n\t\t\t\t\t\t\tthis.filenameRelative,\n\t\t\t\t\t\t\tgetSrcPrefixes(opts)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tconst fullModuleName = `${packageName}${moduleName}`;\n\n\t\t\t\t\t\tif (unshiftName) {\n\t\t\t\t\t\t\targs.unshift(t.stringLiteral(fullModuleName));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\targs[0].value = fullModuleName;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis.log.info(\n\t\t\t\t\t\t\t'name-amd-modules',\n\t\t\t\t\t\t\t`Set module name to '${fullModuleName}'`\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tpath.stop();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t};\n\n\treturn {\n\t\tvisitor: {\n\t\t\tProgram: {\n\t\t\t\texit(path, state) {\n\t\t\t\t\t// We must traverse the AST again because the\n\t\t\t\t\t// transform-es2015-modules-amd plugin emits its define()\n\t\t\t\t\t// call after exiting Program node :-(\n\t\t\t\t\tpath.traverse(nameVisitor, {\n\t\t\t\t\t\tfilenameRelative: state.file.opts.filenameRelative,\n\t\t\t\t\t\topts: state.opts,\n\t\t\t\t\t\tlog: PluginLogger.get(state),\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t};\n}\n\n/**\n * Normalize the srcPrefixes Babel option adding a trailing path separator when\n * it is not present.\n * @param {object} opts the Babel plugin options\n * @return {Array} the normalized srcPrefixes array (with native path\n *         separators)\n */\nfunction getSrcPrefixes(opts) {\n\tlet srcPrefixes = opts.srcPrefixes || [\n\t\t'src/main/resources/META-INF/resources',\n\t];\n\n\treturn srcPrefixes\n\t\t.map(srcPrefix => path.normalize(srcPrefix))\n\t\t.map(\n\t\t\tsrcPrefix =>\n\t\t\t\tsrcPrefix.endsWith(path.sep) ? srcPrefix : srcPrefix + path.sep\n\t\t);\n}\n\n/**\n * Resolve the package name of a JS module file.\n * @param {String} packageName a forced package name or '<package.json>' to get\n *\t\t  the package name from the nearest ancestor package.json file\n * @param {String} filenameRelative the filenameRelative path as given by Babel\n *        compiler\n * @return {String} the package name (in 'pkg@version' format) ending with '/'\n */\nfunction getPackageName(packageName, filenameRelative) {\n\tpackageName = packageName || '<package.json>';\n\n\tif (packageName === '<package.json>') {\n\t\tconst pkgJsonPath = pkgs.getPackageJsonPath(filenameRelative);\n\t\tconst pkgJson = readJsonSync(pkgJsonPath);\n\n\t\tpackageName = `${pkgJson.name}@${pkgJson.version}/`;\n\t}\n\n\tif (!packageName.endsWith('/')) {\n\t\tpackageName += '/';\n\t}\n\n\treturn packageName;\n}\n\n/**\n * Get the module name of a JS module file given its path.\n * @param {String} filenameRelative the filenameRelative path as given by Babel\n *        compiler\n * @param {Array} srcPrefixes an array of source directories where JS module\n *        files may live\n * @return {String} the module name that must be assigned to the file with the\n *         syntax:\n *         <package name>@<package version>/<relative path without trailing .js>\n */\nfunction getModuleName(filenameRelative, srcPrefixes) {\n\tconst filenameAbsolute = path.resolve(filenameRelative);\n\tconst pkgDir = pkgs.getPackageDir(filenameRelative);\n\n\tlet moduleName = filenameAbsolute.substring(pkgDir.length + 1);\n\n\tif (moduleName.toLowerCase().endsWith('.js')) {\n\t\tmoduleName = moduleName.substring(0, moduleName.length - 3);\n\t}\n\n\tfor (let i = 0; i < srcPrefixes.length; i++) {\n\t\tconst srcPrefix = path.normalize(srcPrefixes[i]);\n\n\t\tif (moduleName.startsWith(srcPrefix)) {\n\t\t\tmoduleName = moduleName.substring(srcPrefix.length);\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (path.sep == '\\\\') {\n\t\tmoduleName = moduleName.replace(/\\\\/g, '/');\n\t}\n\n\treturn moduleName;\n}\n"]}