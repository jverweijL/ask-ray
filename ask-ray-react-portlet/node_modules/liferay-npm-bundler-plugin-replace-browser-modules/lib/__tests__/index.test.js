'use strict';

var _cpFile = require('cp-file');

var _cpFile2 = _interopRequireDefault(_cpFile);

var _fs = require('fs');

var fs = _interopRequireWildcard(_fs);

var _pluginLogger = require('liferay-npm-build-tools-common/lib/plugin-logger');

var _pluginLogger2 = _interopRequireDefault(_pluginLogger);

var _index = require('../index');

var _index2 = _interopRequireDefault(_index);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Package descriptor used in tests
var pkg = {
	id: 'package@1.0.0',
	name: 'package',
	version: '1.0.0',
	dir: process.cwd() + '/packages/' + 'liferay-npm-bundler-plugin-replace-browser-modules/src/__tests__'
};

// Package files used in tests
var pkgFiles = ['test-2.js.file', 'test-browser-2.js.file', 'test-browser.js.file', 'test-main.js.file', 'test.js.file'];

var log = void 0;

// Restore package status prior to running each test
beforeEach(function () {
	log = new _pluginLogger2.default();
	pkgFiles.forEach(function (file) {
		_cpFile2.default.sync(pkg.dir + '/sources/' + file, pkg.dir + '/' + file);
	});
});

// Delete result files after running each test
afterEach(function () {
	pkgFiles.forEach(function (file) {
		try {
			fs.unlinkSync(pkg.dir + '/' + file);
		} catch (err) {}
	});
});

it('logs results correctly', function () {
	var pkgJson = {
		name: pkg.name,
		version: pkg.version,
		main: 'test-main.js.file',
		browser: 'test-browser.js.file'
	};

	(0, _index2.default)({ pkg: pkg, log: log }, { pkgJson: pkgJson });

	expect(log.messages).toMatchSnapshot();
});

it('replaces main file with browser file', function () {
	var pkgJson = {
		name: pkg.name,
		version: pkg.version,
		main: 'test-main.js.file',
		browser: 'test-browser.js.file'
	};

	(0, _index2.default)({ pkg: pkg, log: log }, { pkgJson: pkgJson });

	expect(fs.readFileSync(pkg.dir + '/test-main.js.file').toString()).toMatchSnapshot();
});

it('works with unpkg field too', function () {
	var pkgJson = {
		name: pkg.name,
		version: pkg.version,
		main: 'test-main.js.file',
		unpkg: 'test-browser.js.file'
	};

	(0, _index2.default)({ pkg: pkg, log: log }, { pkgJson: pkgJson });

	expect(fs.readFileSync(pkg.dir + '/test-main.js.file').toString()).toMatchSnapshot();
});

it('works with jsdelivr field too', function () {
	var pkgJson = {
		name: pkg.name,
		version: pkg.version,
		main: 'test-main.js.file',
		jsdelivr: 'test-browser.js.file'
	};

	(0, _index2.default)({ pkg: pkg, log: log }, { pkgJson: pkgJson });

	expect(fs.readFileSync(pkg.dir + '/test-main.js.file').toString()).toMatchSnapshot();
});

it('replaces server files with browser files', function () {
	var pkgJson = {
		name: pkg.name,
		version: pkg.version,
		browser: {
			'test-browser.js.file': 'test.js.file',
			'test-browser-2.js.file': 'test-2.js.file'
		}
	};

	(0, _index2.default)({ pkg: pkg, log: log }, { pkgJson: pkgJson });

	expect(fs.readFileSync(pkg.dir + '/test-browser.js.file').toString()).toMatchSnapshot();
	expect(fs.readFileSync(pkg.dir + '/test-browser-2.js.file').toString()).toMatchSnapshot();
});

it('does replace ignored modules with empty objects', function () {
	var pkgJson = {
		name: pkg.name,
		version: pkg.version,
		main: 'main.js',
		browser: {
			'test-browser.js.file': false
		}
	};

	(0, _index2.default)({ pkg: pkg, log: log }, { pkgJson: pkgJson });

	expect(fs.readFileSync(pkg.dir + '/test-browser.js.file').toString()).toMatchSnapshot();
});

it('does not throw on inexistent files', function () {
	var pkgJson = {
		name: pkg.name,
		version: pkg.version,
		main: 'main.js',
		browser: 'non-existent-file.js'
	};

	(0, _index2.default)({ pkg: pkg, log: log }, { pkgJson: pkgJson });
});
//# sourceMappingURL=index.test.js.map