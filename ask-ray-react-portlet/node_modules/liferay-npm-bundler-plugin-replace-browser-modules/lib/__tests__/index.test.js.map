{"version":3,"sources":["../../src/__tests__/index.test.js"],"names":["fs","pkg","id","name","version","dir","process","cwd","pkgFiles","log","beforeEach","forEach","sync","file","afterEach","unlinkSync","err","it","pkgJson","main","browser","expect","messages","toMatchSnapshot","readFileSync","toString","unpkg","jsdelivr"],"mappings":"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","file":"index.test.js","sourcesContent":["import cpFile from 'cp-file';\nimport * as fs from 'fs';\nimport PluginLogger from 'liferay-npm-build-tools-common/lib/plugin-logger';\nimport plugin from '../index';\n\n// Package descriptor used in tests\nconst pkg = {\n\tid: 'package@1.0.0',\n\tname: 'package',\n\tversion: '1.0.0',\n\tdir:\n\t\t`${process.cwd()}/packages/` +\n\t\t`liferay-npm-bundler-plugin-replace-browser-modules/src/__tests__`,\n};\n\n// Package files used in tests\nconst pkgFiles = [\n\t'test-2.js.file',\n\t'test-browser-2.js.file',\n\t'test-browser.js.file',\n\t'test-main.js.file',\n\t'test.js.file',\n];\n\nlet log;\n\n// Restore package status prior to running each test\nbeforeEach(() => {\n\tlog = new PluginLogger();\n\tpkgFiles.forEach(file => {\n\t\tcpFile.sync(`${pkg.dir}/sources/${file}`, `${pkg.dir}/${file}`);\n\t});\n});\n\n// Delete result files after running each test\nafterEach(() => {\n\tpkgFiles.forEach(file => {\n\t\ttry {\n\t\t\tfs.unlinkSync(`${pkg.dir}/${file}`);\n\t\t} catch (err) {}\n\t});\n});\n\nit('logs results correctly', () => {\n\tconst pkgJson = {\n\t\tname: pkg.name,\n\t\tversion: pkg.version,\n\t\tmain: 'test-main.js.file',\n\t\tbrowser: 'test-browser.js.file',\n\t};\n\n\tplugin({pkg, log}, {pkgJson});\n\n\texpect(log.messages).toMatchSnapshot();\n});\n\nit('replaces main file with browser file', () => {\n\tconst pkgJson = {\n\t\tname: pkg.name,\n\t\tversion: pkg.version,\n\t\tmain: 'test-main.js.file',\n\t\tbrowser: 'test-browser.js.file',\n\t};\n\n\tplugin({pkg, log}, {pkgJson});\n\n\texpect(\n\t\tfs.readFileSync(`${pkg.dir}/test-main.js.file`).toString()\n\t).toMatchSnapshot();\n});\n\nit('works with unpkg field too', () => {\n\tconst pkgJson = {\n\t\tname: pkg.name,\n\t\tversion: pkg.version,\n\t\tmain: 'test-main.js.file',\n\t\tunpkg: 'test-browser.js.file',\n\t};\n\n\tplugin({pkg, log}, {pkgJson});\n\n\texpect(\n\t\tfs.readFileSync(`${pkg.dir}/test-main.js.file`).toString()\n\t).toMatchSnapshot();\n});\n\nit('works with jsdelivr field too', () => {\n\tconst pkgJson = {\n\t\tname: pkg.name,\n\t\tversion: pkg.version,\n\t\tmain: 'test-main.js.file',\n\t\tjsdelivr: 'test-browser.js.file',\n\t};\n\n\tplugin({pkg, log}, {pkgJson});\n\n\texpect(\n\t\tfs.readFileSync(`${pkg.dir}/test-main.js.file`).toString()\n\t).toMatchSnapshot();\n});\n\nit('replaces server files with browser files', () => {\n\tconst pkgJson = {\n\t\tname: pkg.name,\n\t\tversion: pkg.version,\n\t\tbrowser: {\n\t\t\t'test-browser.js.file': 'test.js.file',\n\t\t\t'test-browser-2.js.file': 'test-2.js.file',\n\t\t},\n\t};\n\n\tplugin({pkg, log}, {pkgJson});\n\n\texpect(\n\t\tfs.readFileSync(`${pkg.dir}/test-browser.js.file`).toString()\n\t).toMatchSnapshot();\n\texpect(\n\t\tfs.readFileSync(`${pkg.dir}/test-browser-2.js.file`).toString()\n\t).toMatchSnapshot();\n});\n\nit('does replace ignored modules with empty objects', () => {\n\tconst pkgJson = {\n\t\tname: pkg.name,\n\t\tversion: pkg.version,\n\t\tmain: 'main.js',\n\t\tbrowser: {\n\t\t\t'test-browser.js.file': false,\n\t\t},\n\t};\n\n\tplugin({pkg, log}, {pkgJson});\n\n\texpect(\n\t\tfs.readFileSync(`${pkg.dir}/test-browser.js.file`).toString()\n\t).toMatchSnapshot();\n});\n\nit('does not throw on inexistent files', () => {\n\tconst pkgJson = {\n\t\tname: pkg.name,\n\t\tversion: pkg.version,\n\t\tmain: 'main.js',\n\t\tbrowser: 'non-existent-file.js',\n\t};\n\n\tplugin({pkg, log}, {pkgJson});\n});\n"]}