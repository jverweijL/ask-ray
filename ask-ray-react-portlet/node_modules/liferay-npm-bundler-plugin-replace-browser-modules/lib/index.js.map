{"version":3,"sources":["../src/index.js"],"names":["pkg","log","pkgJson","browser","unpkg","jsdelivr","replaceMainModule","dir","replaceModules","info","pkgDir","pkgId","name","version","main","src","join","dest","replaceFile","Object","keys","forEach","to","from","ignoreFile","srcName","destName","srcModuleName","replace","destModuleName","contents","readFileSync","toString","writeFileSync","err","code","file","fileName"],"mappings":"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","file":"index.js","sourcesContent":["import fs from 'fs';\nimport path from 'path';\n\n/**\n * @return {void}\n */\nexport default function({pkg, log}, {pkgJson}) {\n\tconst browser = pkgJson.browser || pkgJson.unpkg || pkgJson.jsdelivr;\n\n\tif (browser) {\n\t\tif (typeof browser === 'string') {\n\t\t\treplaceMainModule(pkg.dir, browser, pkgJson, log);\n\t\t} else {\n\t\t\treplaceModules(pkg.dir, browser, pkgJson, log);\n\t\t}\n\t} else {\n\t\tlog.info('replace-browser-modules', 'No browser modules found');\n\t}\n}\n\n/**\n * Copy \"browser\"/\"module\" module file on top of \"main\" module file.\n * @param {String} pkgDir directory where package is placed\n * @param {String} browser the value of the \"browser\"/\"module\" field\n * @param {Object} pkgJson package.json contents\n * @param {PluginLogger} log a logger\n * @return {void}\n */\nfunction replaceMainModule(pkgDir, browser, pkgJson, log) {\n\tconst pkgId = `${pkgJson.name}@${pkgJson.version}`;\n\tconst main = pkgJson.main || 'index.js';\n\n\tconst src = path.join(pkgDir, browser);\n\tconst dest = path.join(pkgDir, main);\n\n\treplaceFile(pkgId, src, browser, dest, main, log);\n}\n\n/**\n * Copy \"browser\"/\"module\" module files on top of their server versions.\n * @param {String} pkgDir directory where package is placed\n * @param {String} browser the value of the \"browser\"/\"module\" field\n * @param {Object} pkgJson package.json contents\n * @param {PluginLogger} log a logger\n * @return {void}\n */\nfunction replaceModules(pkgDir, browser, pkgJson, log) {\n\tconst pkgId = `${pkgJson.name}@${pkgJson.version}`;\n\n\tObject.keys(browser).forEach(from => {\n\t\tconst to = browser[from];\n\t\tconst dest = path.join(pkgDir, from);\n\n\t\tif (to == false) {\n\t\t\tignoreFile(dest, from, log);\n\t\t} else {\n\t\t\tconst src = path.join(pkgDir, to);\n\n\t\t\treplaceFile(pkgId, src, to, dest, from, log);\n\t\t}\n\t});\n}\n\n/**\n * Replace one package file with another.\n * @param {String} pkgId package id (name@version)\n * @param {String} src path to source file\n * @param {String} srcName the name of the source file\n * @param {String} dest path to destination file\n * @param {String} destName the name of the destination file\n * @param {PluginLogger} log a logger\n * @return {void}\n */\nfunction replaceFile(pkgId, src, srcName, dest, destName, log) {\n\tconst srcModuleName = srcName.replace('.js', '');\n\tconst destModuleName = destName.replace('.js', '');\n\n\tlog.info(\n\t\t'replace-browser-modules',\n\t\t`Replacing module ${destName} with module ${srcName}`\n\t);\n\n\ttry {\n\t\tlet contents = fs.readFileSync(src).toString();\n\n\t\tcontents = contents.replace(\n\t\t\t`'${pkgId}/${srcModuleName}'`,\n\t\t\t`'${pkgId}/${destModuleName}'`\n\t\t);\n\n\t\tfs.writeFileSync(\n\t\t\tdest,\n\t\t\t'/* Module replaced with ' +\n\t\t\t\tsrcName +\n\t\t\t\t' by liferay-npm-bundler-plugin-replace-browser-modules */\\n' +\n\t\t\t\tcontents\n\t\t);\n\t} catch (err) {\n\t\tif (err.code !== 'ENOENT') {\n\t\t\tthrow err;\n\t\t}\n\t}\n}\n\n/**\n * Ignores one package\n * @param {String} file path to file to be ignored\n * @param {String} fileName the name of the file\n * @param {PluginLogger} log a logger\n * @return {void}\n */\nfunction ignoreFile(file, fileName, log) {\n\tlog.info(\n\t\t'replace-browser-modules',\n\t\t`Emptying module ${fileName} because it is server-only`\n\t);\n\n\tfs.writeFileSync(\n\t\tfile,\n\t\t'/* Module ignored by ' +\n\t\t\t'liferay-npm-bundler-plugin-replace-browser-modules */\\n'\n\t);\n}\n"]}