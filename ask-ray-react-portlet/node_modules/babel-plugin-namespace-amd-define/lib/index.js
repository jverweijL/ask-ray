'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

exports.default = function () {
	var namespaceCount = void 0;

	var namespaceVisitor = {
		Identifier: function Identifier(path) {
			if (path.node.name === 'define') {
				if (path.parent.type === 'MemberExpression' && path.parent.property === path.node) {
					return;
				}

				if (path.parent.type === 'ObjectProperty' && path.parent.key === path.node) {
					return;
				}

				var scope = void 0;

				// Find if 'define' is defined in any scope
				for (scope = path.scope; scope != null; scope = scope.parent) {
					if (scope.bindings.define || scope.globals.define) {
						break;
					}
				}

				// If 'define' is not defined in any scope namespace or defined
				// in the root scope as global, namespace it
				if (scope == null || scope.parent == null && !scope.bindings.define) {
					var namespace = this.opts.namespace || 'Liferay.Loader';

					path.node.name = namespace + '.define';

					namespaceCount++;
				}
			}
		}
	};

	return {
		visitor: {
			Program: {
				exit: function exit(path, state) {
					// We must traverse the AST again because the third party
					// transform-es2015-modules-amd emits its define() call after
					// Program exit :-(
					namespaceCount = 0;

					path.traverse(namespaceVisitor, { opts: state.opts });

					if (namespaceCount > 0) {
						_pluginLogger2.default.get(state).info('namespace-amd-define', 'Namespaced', namespaceCount, 'AMD defines');
					}
				}
			}
		}
	};
};

var _pluginLogger = require('liferay-npm-build-tools-common/lib/plugin-logger');

var _pluginLogger2 = _interopRequireDefault(_pluginLogger);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
//# sourceMappingURL=index.js.map