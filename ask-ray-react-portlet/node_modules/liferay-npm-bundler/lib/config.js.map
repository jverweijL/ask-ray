{"version":3,"sources":["../src/config.js"],"names":["reloadConfig","getOutputDir","getReportFilePath","getExclusions","loadBabelPlugins","getPlugins","getBabelConfig","isProcessSerially","isVerbose","getIncludeDependencies","isDumpReport","getVersionsInfo","pluginsBaseDir","config","loadConfig","err","code","preset","presetFile","sync","basedir","Object","assign","packages","configRequire","module","pluginFile","require","dir","normalize","join","pkg","exclusions","exclude","id","name","presets","plugins","concat","map","presetModule","default","phase","pluginsKey","getPackageConfig","pluginConfig","Array","isArray","pluginName","pluginModule","run","pkgJson","info","version","getPluginVersions","pluginVersions","key","hasOwnProperty","concatAllPlugins","plugin","cfg","concatBundlerPlugins","concatBabelPlugins","babelPresets","babelPlugins","pkgConfig"],"mappings":"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","file":"config.js","sourcesContent":["import {getPackageDir} from 'liferay-npm-build-tools-common/lib/packages';\nimport path from 'path';\nimport readJsonSync from 'read-json-sync';\nimport resolveModule from 'resolve';\n\nlet pluginsBaseDir = '.';\nlet config = loadConfig();\n\n/**\n * Load configuration.\n * @return {Object} the configuration object\n */\nfunction loadConfig() {\n\t// Load base configuration\n\tlet config = {};\n\n\ttry {\n\t\tconfig = readJsonSync('.npmbundlerrc');\n\t} catch (err) {\n\t\tif (err.code !== 'ENOENT') {\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\t// Apply preset if necessary\n\tif (config.preset) {\n\t\tconst presetFile = resolveModule.sync(config.preset, {\n\t\t\tbasedir: '.',\n\t\t});\n\n\t\t// Merge preset with base configuration\n\t\tconfig = Object.assign(readJsonSync(presetFile), config);\n\t\tpluginsBaseDir = getPackageDir(presetFile);\n\t}\n\n\t// Normalize\n\tconfig.packages = config.packages || {};\n\n\treturn config;\n}\n\n/**\n * Require a module using the configured plugins directory.\n * @param {String} module a module name\n * @return {Object} the required module object\n */\nfunction configRequire(module) {\n\tconst pluginFile = resolveModule.sync(module, {\n\t\tbasedir: pluginsBaseDir,\n\t});\n\n\treturn require(pluginFile);\n}\n\n/**\n * Force a config reload\n * @return {void}\n */\nexport function reloadConfig() {\n\tconfig = loadConfig();\n}\n\n/**\n * Get the configured output directory\n * @return {String} the directory path (with native separators)\n */\nexport function getOutputDir() {\n\tconst dir = config['output'] || 'build/resources/main/META-INF/resources';\n\treturn path.normalize(dir);\n}\n\n/**\n * Get the path to the report file or null if no report is configured.\n * @return {String} a normalized path or null\n */\nexport function getReportFilePath() {\n\treturn path.join('.', 'liferay-npm-bundler-report.html');\n}\n\n/**\n * Get the configured file exclusions for a given package.\n * @param {Object} pkg the package descriptor hash containing id, name, version\n *        and dir fields\n * @return {Array} an array of glob expressions\n */\nexport function getExclusions(pkg) {\n\tlet exclusions = config.exclude || {};\n\n\texclusions =\n\t\texclusions[pkg.id] || exclusions[pkg.name] || exclusions['*'] || [];\n\n\treturn exclusions;\n}\n\n/**\n * Load Babel plugins from a given array of presets and plugins.\n * @param {Array} presets an array of Babel preset names as defined by .babelrc\n * @param {Array} plugins an array of Babel plugins names as defined by .babelrc\n * @return {Array} the instantiated Babel plugins\n */\nexport function loadBabelPlugins(presets, plugins) {\n\treturn []\n\t\t.concat(\n\t\t\t...presets.map(preset => {\n\t\t\t\tlet presetModule;\n\n\t\t\t\ttry {\n\t\t\t\t\tpresetModule = configRequire(preset);\n\t\t\t\t} catch (err) {\n\t\t\t\t\tpresetModule = configRequire(`babel-preset-${preset}`);\n\t\t\t\t}\n\n\t\t\t\treturn presetModule.plugins || presetModule.default().plugins;\n\t\t\t})\n\t\t)\n\t\t.concat(plugins);\n}\n\n/**\n * Get the liferay-nmp-bundler plugins for a given package.\n * @param {String} phase 'pre' or 'post'\n * @param {Object} pkg the package descriptor hash containing id, name, version\n *        and dir fields\n * @return {Array} the instantiated Babel plugins\n */\nexport function getPlugins(phase, pkg) {\n\tconst pluginsKey = phase === 'pre' ? 'plugins' : 'post-plugins';\n\tconst plugins = getPackageConfig(pkg, pluginsKey) || [];\n\n\treturn plugins.map(pluginName => {\n\t\tlet pluginConfig = {};\n\n\t\tif (Array.isArray(pluginName)) {\n\t\t\tpluginConfig = pluginName[1];\n\t\t\tpluginName = pluginName[0];\n\t\t}\n\n\t\tconst pluginModule = configRequire(\n\t\t\t`liferay-npm-bundler-plugin-${pluginName}`\n\t\t);\n\n\t\treturn {\n\t\t\tname: pluginName,\n\t\t\tconfig: pluginConfig,\n\t\t\trun: pluginModule.default,\n\t\t};\n\t});\n}\n\n/**\n * Get Babel config for a given package\n * @param {Object} pkg the package descriptor hash containing id, name, version\n *        and dir fields\n * @return {Object} a Babel configuration object as defined by its API\n */\nexport function getBabelConfig(pkg) {\n\treturn getPackageConfig(pkg, '.babelrc') || {};\n}\n\n/**\n * Whether or not to process npm packages serially\n * @return {boolean}\n */\nexport function isProcessSerially() {\n\treturn config['process-serially'] || false;\n}\n\n/**\n * Whether or not to dump detailed information about what the tool is doing\n * @return {boolean}\n */\nexport function isVerbose() {\n\treturn config['verbose'] || false;\n}\n\n/**\n * Extra dependencies to add to the final bundle (in addition to those listed\n * under the dependencies section of package.json).\n * @return {Array} an array of package names\n */\nexport function getIncludeDependencies() {\n\treturn config['include-dependencies'] || [];\n}\n\n/**\n * Whether or not to dump report\n * @return {boolean}\n */\nexport function isDumpReport() {\n\treturn config['dump-report'] || false;\n}\n\n/**\n * Get versions information\n * @return {void}\n */\nexport function getVersionsInfo() {\n\tconst pkgJson = require('../package.json');\n\n\tlet info = {\n\t\t'liferay-npm-bundler': pkgJson.version,\n\t};\n\n\tinfo = Object.assign(info, getPluginVersions());\n\n\treturn info;\n}\n/**\n * Get version numbers of all plugins used in the build.\n * @return {Object} a map of {plugin-name: version} values\n */\nfunction getPluginVersions() {\n\tlet pluginVersions = {};\n\n\t// Get preset plugin version\n\tif (config.preset) {\n\t\tpluginVersions[config.preset] = configRequire(\n\t\t\t`${config.preset}/package.json`\n\t\t).version;\n\t}\n\n\t// Get legacy package and package plugins versions\n\tlet plugins = [];\n\n\tfor (let key in config) {\n\t\tif (config.hasOwnProperty(key)) {\n\t\t\tplugins = concatAllPlugins(plugins, config[key]);\n\t\t}\n\t}\n\n\tfor (let key in config.packages) {\n\t\tif (config.packages.hasOwnProperty(key)) {\n\t\t\tplugins = concatAllPlugins(plugins, config.packages[key]);\n\t\t}\n\t}\n\n\tfor (let plugin of plugins) {\n\t\tif (!pluginVersions[plugin]) {\n\t\t\tpluginVersions[plugin] = configRequire(\n\t\t\t\t`${plugin}/package.json`\n\t\t\t).version;\n\t\t}\n\t}\n\n\treturn pluginVersions;\n}\n\n/**\n * Add version numbers for all bundler and Babel plugins listed in `cfg`.\n * @param {Array} plugins the array of currently collected plugins\n * @param {Array} cfg a configuration subsection\n * @return {Array} the concatenated array of collected plugins\n */\nfunction concatAllPlugins(plugins, cfg) {\n\tif (cfg) {\n\t\tplugins = concatBundlerPlugins(plugins, cfg['plugins']);\n\t\tplugins = concatBundlerPlugins(plugins, cfg['post-plugins']);\n\t\tplugins = concatBabelPlugins(plugins, cfg['.babelrc']);\n\t}\n\n\treturn plugins;\n}\n\n/**\n * Add version numbers for all bundler plugins listed in `cfg`.\n * @param {Array} plugins the array of currently collected plugins\n * @param {Array} cfg a configuration subsection\n * @return {Array} the concatenated array of collected plugins\n */\nfunction concatBundlerPlugins(plugins, cfg) {\n\tif (!cfg) {\n\t\treturn plugins;\n\t}\n\n\treturn plugins.concat(\n\t\tcfg.map(name => {\n\t\t\tif (Array.isArray(name)) {\n\t\t\t\tname = name[0];\n\t\t\t}\n\n\t\t\treturn `liferay-npm-bundler-plugin-${name}`;\n\t\t})\n\t);\n}\n\n/**\n * Add version numbers for all Babel plugins listed in `cfg`.\n * @param {Array} plugins the array of currently collected plugins\n * @param {Array} cfg a configuration subsection\n * @return {Array} the concatenated array of collected plugins\n */\nfunction concatBabelPlugins(plugins, cfg) {\n\tif (!cfg) {\n\t\treturn plugins;\n\t}\n\n\tconst babelPresets = cfg['presets'];\n\tconst babelPlugins = cfg['plugins'];\n\n\tif (babelPresets) {\n\t\tplugins = plugins.concat(\n\t\t\tbabelPresets.map(name => {\n\t\t\t\ttry {\n\t\t\t\t\tconfigRequire(name);\n\t\t\t\t\treturn name;\n\t\t\t\t} catch (err) {\n\t\t\t\t\treturn `babel-preset-${name}`;\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t}\n\n\tif (babelPlugins) {\n\t\tplugins = plugins.concat(\n\t\t\tbabelPlugins.map(name => {\n\t\t\t\tif (Array.isArray(name)) {\n\t\t\t\t\tname = name[0];\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tconfigRequire(name);\n\t\t\t\t\treturn name;\n\t\t\t\t} catch (err) {\n\t\t\t\t\treturn `babel-plugin-${name}`;\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t}\n\n\treturn plugins;\n}\n\n/**\n * Get a configuration for a specific package. This method looks in the packages\n * section, then at root in the precedence order: first package id, then package\n * name.\n * @param {Object} pkg the package descriptor hash containing id, name, version\n *        and dir fields\n * @param  {String} key the key name\n * @return {Object} a configuration object\n */\nfunction getPackageConfig(pkg, key) {\n\tlet pkgConfig;\n\n\tif (config.packages[pkg.id] && config.packages[pkg.id][key]) {\n\t\tpkgConfig = config.packages[pkg.id][key];\n\t} else if (config.packages[pkg.name] && config.packages[pkg.name][key]) {\n\t\tpkgConfig = config.packages[pkg.name][key];\n\t} else if (config[pkg.id] && config[pkg.id][key]) {\n\t\tpkgConfig = config[pkg.id][key];\n\t} else if (config[pkg.name] && config[pkg.name][key]) {\n\t\tpkgConfig = config[pkg.name][key];\n\t} else if (config['*'] && config['*'][key]) {\n\t\tpkgConfig = config['*'][key];\n\t}\n\n\treturn pkgConfig;\n}\n"]}