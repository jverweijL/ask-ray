{"version":3,"sources":["../../src/report/index.js"],"names":["Report","_executionDate","Date","_versionsInfo","_packages","_warnings","hrtime","_executionTime","message","unique","find","item","push","info","packageName","packageLink","packageVersion","pkgId","pkg","_getPackage","link","deps","forEach","dep","id","Object","assign","keys","allFiles","copiedFiles","exclusions","rpkg","phase","plugin","logger","pkgProcess","_getPackageProcess","name","babelConfig","babel","config","filePath","files","process","pre","post","report"],"mappings":"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","file":"index.js","sourcesContent":["import {htmlDump} from './html';\nimport {analyticsDump} from './analytics';\n\n/**\n * A Report holds data describing a execution of the liferay-npm-bundler so that\n * it can be dump as an HTML report.\n * @type {Report}\n */\nexport class Report {\n\t/**\n\t * Constructor\n\t */\n\tconstructor() {\n\t\tthis._executionDate = new Date();\n\t\tthis._versionsInfo = {};\n\t\tthis._packages = {};\n\t\tthis._warnings = [];\n\t}\n\n\t/**\n\t * Return an HTML string with the information contained in this report.\n\t * @return {String} an HTML string\n\t */\n\ttoHtml() {\n\t\treturn htmlDump(this);\n\t}\n\n\t/**\n\t * Dump report information to insight package so that it gets exported to\n\t * our Google Analytics account.\n\t * @return {void}\n\t */\n\tsendAnalytics() {\n\t\treturn analyticsDump(this);\n\t}\n\n\t/**\n\t * Register execution time.\n\t * @param  {Array} hrtime the time it took to execute\n\t * @return {void}\n\t */\n\texecutionTime(hrtime) {\n\t\tthis._executionTime = hrtime;\n\t}\n\n\t/**\n\t * Register a warning.\n\t * @param  {String} message the warning message\n\t * @param  {boolean} unique set to true if you want this warning to be deduped\n\t * @return {void}\n\t */\n\twarn(message, {unique} = {unique: false}) {\n\t\tif (unique && this._warnings.find(item => item === message)) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._warnings.push(message);\n\t}\n\n\t/**\n\t * Register a versions hash describing the packages and versions used by the\n\t * build process.\n\t * @param  {Object} info a hash or (package,version) pairs\n\t * @return {void}\n\t */\n\tversionsInfo(info) {\n\t\tthis._versionsInfo = info;\n\t}\n\n\t/**\n\t * Register a linked dependency found in the root package.json.\n\t * @param  {String} packageName package name\n\t * @param  {String} packageLink the link to the package\n\t * @param  {String} packageVersion package version\n\t * @return {void}\n\t */\n\tlinkedDependency(packageName, packageLink, packageVersion) {\n\t\tconst pkgId = `${packageName}@${packageVersion}`;\n\t\tlet pkg = this._getPackage(pkgId);\n\n\t\tpkg.link = packageLink;\n\t}\n\n\t/**\n\t * Register the list of dependencies detected in this build.\n\t * @param  {Array} deps an array of package descriptors (with id, name and\n\t * \t\t\t\t\t\tversion fields)\n\t * @return {void}\n\t */\n\tdependencies(deps) {\n\t\tdeps.forEach(dep => {\n\t\t\tlet pkg = this._getPackage(dep.id);\n\n\t\t\tObject.assign(pkg, dep);\n\t\t});\n\n\t\t// Remove all pre-registered packages that are not in the deps array\n\t\tObject.keys(this._packages).forEach(pkgId => {\n\t\t\tconst pkg = this._packages[pkgId];\n\n\t\t\tif (!pkg.id) {\n\t\t\t\tdelete this._packages[pkgId];\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Register a package copy action.\n\t * @param  {Object} pkg a package descriptor\n\t * @param  {Array} allFiles the list of all files in the package\n\t * @param  {Array} copiedFiles the list of files copied to the target\n\t * @param  {Array} exclusions the list of configured file exclusions\n\t * @return {void}\n\t */\n\tpackageCopy(pkg, allFiles, copiedFiles, exclusions) {\n\t\tlet rpkg = this._getPackage(pkg.id);\n\n\t\tObject.assign(rpkg, {\n\t\t\tallFiles,\n\t\t\tcopiedFiles,\n\t\t\texclusions,\n\t\t});\n\t}\n\n\t/**\n\t * Register a liferay-npm-bundler plugin execution.\n\t * @param  {String} phase run phase (pre or post)\n\t * @param  {Object} pkg package descriptor\n\t * @param  {Object} plugin plugin descriptor (with config and run fields)\n\t * @param  {PluginLogger} logger the logger cotaining the process messages\n\t * @return {void}\n\t */\n\tpackageProcessBundlerPlugin(phase, pkg, plugin, logger) {\n\t\tlet pkgProcess = this._getPackageProcess(pkg.id);\n\n\t\tpkgProcess[phase][plugin.name] = {\n\t\t\tplugin,\n\t\t\tlogger,\n\t\t};\n\t}\n\n\t/**\n\t * Register a Babel execution config.\n\t * @param  {Object} pkg package descriptor\n\t * @param  {Object} babelConfig the Babel config object\n\t * @return {void}\n\t */\n\tpackageProcessBabelConfig(pkg, babelConfig) {\n\t\tlet {babel} = this._getPackageProcess(pkg.id);\n\n\t\tbabel.config = babelConfig;\n\t}\n\n\t/**\n\t * Register a Babel file process.\n\t * @param  {Object} pkg package descriptor\n\t * @param  {String} filePath the file path\n\t * @param  {PluginLogger} logger the logger cotaining the process messages\n\t * @return {void}\n\t */\n\tpackageProcessBabelRun(pkg, filePath, logger) {\n\t\tlet {babel} = this._getPackageProcess(pkg.id);\n\n\t\tbabel.files[filePath] = {logger};\n\t}\n\n\t/**\n\t * Get a package slot and create it if missing.\n\t * @param  {String} pkgId the package id\n\t * @return {Object} a package slot\n\t */\n\t_getPackage(pkgId) {\n\t\tlet pkg = this._packages[pkgId];\n\n\t\tif (!pkg) {\n\t\t\tpkg = this._packages[pkgId] = {\n\t\t\t\tallFiles: [],\n\t\t\t\tcopiedFiles: [],\n\t\t\t\texclusions: [],\n\t\t\t};\n\n\t\t\tthis._getPackageProcess(pkgId);\n\t\t}\n\n\t\treturn pkg;\n\t}\n\n\t/**\n\t * Get a package process slot and create it if missing.\n\t * @param  {String} pkgId the package id\n\t * @return {Object} a package process slot\n\t */\n\t_getPackageProcess(pkgId) {\n\t\tlet rpkg = this._getPackage(pkgId);\n\n\t\trpkg.process = rpkg.process || {\n\t\t\tpre: {},\n\t\t\tbabel: {\n\t\t\t\tconfig: {},\n\t\t\t\tfiles: {},\n\t\t\t},\n\t\t\tpost: {},\n\t\t};\n\n\t\treturn rpkg.process;\n\t}\n}\n\nconst report = new Report();\n\nexport default report;\n"]}