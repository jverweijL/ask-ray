{"version":3,"sources":["../src/dependencies.js"],"names":["getPackageDependencies","basedir","extraDependencies","pkgs","packageJson","join","pkgId","name","version","id","dir","dependencies","Object","keys","concat","dependencyDirs","map","dependency","resolveDependencyDir","filter","dependencyDir","forEach","depPkgs","packageDir","pkgJsonFile","sync","dirname"],"mappings":";;;;;QAkBgBA,sB,GAAAA,sB;;AAlBhB;;;;AACA;;;;AACA;;;;;;AAEA;;;;;;;;;;;;;;AAcO,SAASA,sBAAT,CAAgCC,OAAhC,EAAiE;AAAA,KAAxBC,iBAAwB,uEAAJ,EAAI;;AACvE,KAAMC,OAAO,EAAb;;AAEA,KAAMC,cAAc,4BAAa,eAAKC,IAAL,CAAUJ,OAAV,EAAmB,eAAnB,CAAb,CAApB;AACA,KAAMK,QAAQF,YAAYG,IAAZ,GAAmB,GAAnB,GAAyBH,YAAYI,OAAnD;;AAEAL,MAAKG,KAAL,IAAc;AACbG,MAAIH,KADS;AAEbC,QAAMH,YAAYG,IAFL;AAGbC,WAASJ,YAAYI,OAHR;AAIbE,OAAKT;AAJQ,EAAd;;AAOA,KAAIU,eAAeP,YAAYO,YAAZ,IAA4B,EAA/C;;AAEAA,gBAAeC,OAAOC,IAAP,CAAYF,YAAZ,CAAf;;AAEAA,gBAAeA,aAAaG,MAAb,CAAoBZ,iBAApB,CAAf;;AAEA,KAAIa,iBAAiBJ,aAAaK,GAAb,CAAiB,UAASC,UAAT,EAAqB;AAC1D,SAAOC,qBAAqBjB,OAArB,EAA8BgB,UAA9B,CAAP;AACA,EAFoB,CAArB;;AAIAF,kBAAiBA,eAAeI,MAAf,CAAsB,yBAAiB;AACvD,SAAOC,iBAAiB,IAAxB;AACA,EAFgB,CAAjB;;AAIAL,gBAAeM,OAAf,CAAuB,UAASD,aAAT,EAAwB;AAC9C,MAAME,UAAUtB,uBAAuBoB,aAAvB,CAAhB;;AAEAR,SAAOC,IAAP,CAAYS,OAAZ,EAAqBD,OAArB,CAA6B,UAASf,KAAT,EAAgB;AAC5CH,QAAKG,KAAL,IAAcgB,QAAQhB,KAAR,CAAd;AACA,GAFD;AAGA,EAND;;AAQA,QAAOH,IAAP;AACA;;AAED;;;;;;AAMA,SAASe,oBAAT,CAA8BK,UAA9B,EAA0CN,UAA1C,EAAsD;AACrD,KAAMO,cAAc,kBAAcC,IAAd,CAAmBR,aAAa,eAAhC,EAAiD;AACpEhB,WAASsB;AAD2D,EAAjD,CAApB;;AAIA,QAAO,eAAKG,OAAL,CAAaF,WAAb,CAAP;AACA","file":"dependencies.js","sourcesContent":["import path from 'path';\nimport readJsonSync from 'read-json-sync';\nimport resolveModule from 'resolve';\n\n/**\n * Recursively find the dependencies of a package and return them as\n * @param {String} basedir directory where package lives in\n * @param {Array} extraDependencies an array of package names to add to\n * \t\t\t\t\t\t\t\t\tdependencies collected from package.json\n * @return {Object} a hash of objects where key is the package id and values\n *         have the following structure:\n *           {\n *             id: <package id>,     // a unique `name@version` string\n *             name: <package name>,\n *             version: <package version>,\n *             dir: <package dir>\n *           }\n */\nexport function getPackageDependencies(basedir, extraDependencies = []) {\n\tconst pkgs = {};\n\n\tconst packageJson = readJsonSync(path.join(basedir, '/package.json'));\n\tconst pkgId = packageJson.name + '@' + packageJson.version;\n\n\tpkgs[pkgId] = {\n\t\tid: pkgId,\n\t\tname: packageJson.name,\n\t\tversion: packageJson.version,\n\t\tdir: basedir,\n\t};\n\n\tlet dependencies = packageJson.dependencies || [];\n\n\tdependencies = Object.keys(dependencies);\n\n\tdependencies = dependencies.concat(extraDependencies);\n\n\tlet dependencyDirs = dependencies.map(function(dependency) {\n\t\treturn resolveDependencyDir(basedir, dependency);\n\t});\n\n\tdependencyDirs = dependencyDirs.filter(dependencyDir => {\n\t\treturn dependencyDir != null;\n\t});\n\n\tdependencyDirs.forEach(function(dependencyDir) {\n\t\tconst depPkgs = getPackageDependencies(dependencyDir);\n\n\t\tObject.keys(depPkgs).forEach(function(pkgId) {\n\t\t\tpkgs[pkgId] = depPkgs[pkgId];\n\t\t});\n\t});\n\n\treturn pkgs;\n}\n\n/**\n * Resolves a dependency package and returns its directory.\n * @param {String} packageDir the base directory used for resolution\n * @param {String} dependency a package name\n * @return {String} the path of the directory containing the dependency package\n */\nfunction resolveDependencyDir(packageDir, dependency) {\n\tconst pkgJsonFile = resolveModule.sync(dependency + '/package.json', {\n\t\tbasedir: packageDir,\n\t});\n\n\treturn path.dirname(pkgJsonFile);\n}\n"]}