{"version":3,"sources":["../src/index.js"],"names":["args","versionsInfo","config","getVersionsInfo","console","log","JSON","stringify","insight","init","then","run","babel","outputDir","resolve","getOutputDir","mkdirsSync","join","promises","push","copyRootPackageJson","pkgs","getIncludeDependencies","Object","keys","map","id","filter","pkg","dir","dependencies","start","process","hrtime","info","length","isProcessSerially","warn","iterateSerially","bundlePackage","Promise","all","executionTime","sendAnalytics","isDumpReport","writeFileSync","getReportFilePath","toHtml","catch","err","error","exit","pkgJson","forEach","scope","depVersion","depName","validRange","depPkgJsonPath","substring","depPkgJson","version","linkedDependency","writeJson","spaces","values","asyncProcess","val","p","slice","outPkgDir","name","statSync","isDirectory","debug","copyPackage","processPackage","runBabel","rawGlobs","exclusions","getExclusions","globs","concat","exclusion","fileFilter","path","isFile","relativePathMapper","paths","rawPaths","sync","packageCopy","copy","phase","reject","pkgJsonPath","state","getPlugins","logger","plugin","packageProcessBundlerPlugin","babelConfig","assign","getBabelConfig","babelrc","only","sourceMaps","undefined","packageProcessBabelConfig","plugins","loadBabelPlugins","presets","filePaths","set","filePath","transformFile","filenameRelative","result","substr","indexOf","unique","fileName","basename","code","packageProcessBabelRun","delete"],"mappings":"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","file":"index.js","sourcesContent":["import * as babel from 'babel-core';\nimport fs from 'fs-extra';\nimport globby from 'globby';\nimport {getPackageTargetDir} from 'liferay-npm-build-tools-common/lib/packages';\nimport PluginLogger from 'liferay-npm-build-tools-common/lib/plugin-logger';\nimport path from 'path';\nimport pretty from 'pretty-time';\nimport readJsonSync from 'read-json-sync';\nimport semver from 'semver';\n\nimport * as config from './config';\nimport * as insight from './insight';\nimport {getPackageDependencies} from './dependencies';\nimport * as log from './log';\nimport report from './report';\n\n/**\n * Default entry point for the liferay-npm-bundler.\n * @param {Array} args command line arguments\n * @return {void}\n */\nexport default function(args) {\n\tconst versionsInfo = config.getVersionsInfo();\n\n\tif (args[0] === '-v' || args[0] === '--version') {\n\t\tconsole.log(JSON.stringify(versionsInfo, null, 2));\n\t\treturn;\n\t} else {\n\t\treport.versionsInfo(versionsInfo);\n\t}\n\n\tinsight.init().then(run);\n}\n\n/**\n * Real tool execution\n * @return {void}\n */\nfunction run() {\n\t// Create work directories\n\tconst outputDir = path.resolve(config.getOutputDir());\n\tfs.mkdirsSync(path.join(outputDir, 'node_modules'));\n\n\tlet promises = [];\n\n\t// Copy project's package.json\n\tpromises.push(copyRootPackageJson(outputDir));\n\n\t// Grab NPM dependencies\n\tlet pkgs = getPackageDependencies('.', config.getIncludeDependencies());\n\tpkgs = Object.keys(pkgs).map(id => pkgs[id]);\n\tpkgs = pkgs.filter(pkg => pkg.dir != '.');\n\n\treport.dependencies(pkgs);\n\n\t// Process NPM dependencies\n\tconst start = process.hrtime();\n\n\tlog.info(`Bundling ${pkgs.length} dependencies...`);\n\n\tif (config.isProcessSerially()) {\n\t\treport.warn(\n\t\t\t'Option process-serially is on: this may degrade build performance.'\n\t\t);\n\n\t\tpromises.push(\n\t\t\titerateSerially(pkgs, pkg => bundlePackage(pkg, outputDir))\n\t\t);\n\t} else {\n\t\tpromises.push(...pkgs.map(pkg => bundlePackage(pkg, outputDir)));\n\t}\n\n\tPromise.all(promises)\n\t\t.then(() => {\n\t\t\tconst hrtime = process.hrtime(start);\n\n\t\t\treport.executionTime(hrtime);\n\n\t\t\tlog.info(`Bundling took ${pretty(hrtime)}`);\n\n\t\t\t// Send report analytics data\n\t\t\treport.sendAnalytics();\n\n\t\t\t// Write report if requested\n\t\t\tif (config.isDumpReport()) {\n\t\t\t\tfs.writeFileSync(config.getReportFilePath(), report.toHtml());\n\t\t\t\tlog.info(`Report written to ${config.getReportFilePath()}`);\n\t\t\t}\n\t\t})\n\t\t.catch(function(err) {\n\t\t\tlog.error(err);\n\t\t\tprocess.exit(1);\n\t\t});\n}\n\n/**\n * Copy project root package.json file to output directory.\n * @param {String} outputDir the output directory path\n * @return {Promise} a Promise fulfilled when the copy has been finished\n */\nfunction copyRootPackageJson(outputDir) {\n\tconst pkgJson = readJsonSync('package.json');\n\n\t['dependencies', 'devDependencies'].forEach(scope => {\n\t\tif (pkgJson[scope] != null) {\n\t\t\tObject.keys(pkgJson[scope]).forEach(depName => {\n\t\t\t\tconst depVersion = pkgJson[scope][depName];\n\n\t\t\t\tif (semver.validRange(depVersion) == null) {\n\t\t\t\t\tconst depPkgJsonPath = path.join(\n\t\t\t\t\t\tdepVersion.substring(5),\n\t\t\t\t\t\t'package.json'\n\t\t\t\t\t);\n\n\t\t\t\t\tconst depPkgJson = readJsonSync(depPkgJsonPath);\n\n\t\t\t\t\tpkgJson[scope][depName] = depPkgJson.version;\n\n\t\t\t\t\treport.linkedDependency(\n\t\t\t\t\t\tdepName,\n\t\t\t\t\t\tdepVersion,\n\t\t\t\t\t\tdepPkgJson.version\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n\n\treturn fs.writeJson(path.join(outputDir, 'package.json'), pkgJson, {\n\t\tspaces: 2,\n\t});\n}\n\n/**\n * Iterate through the elements of an array applying an async process serially\n * to each one of them.\n * @param {Array} values array of values to be iterated\n * @param {function} asyncProcess the async process (that returns a Promise) to\n *        be executed on each value\n * @return {Promise} a Promise that is resolved as soon as the iteration\n *         finishes\n */\nfunction iterateSerially(values, asyncProcess) {\n\treturn new Promise(resolve => {\n\t\tif (values.length == 0) {\n\t\t\tresolve();\n\t\t\treturn;\n\t\t}\n\n\t\tlet val = values[0];\n\n\t\tlet p = asyncProcess(val);\n\n\t\tp.then(() => {\n\t\t\titerateSerially(values.slice(1), asyncProcess).then(() => {\n\t\t\t\tresolve();\n\t\t\t});\n\t\t});\n\t});\n}\n\n/**\n * Bundle a npm package\n * @param {Object} pkg the package descriptor hash containing id, name, version\n *        and dir fields\n * @param {String} outputDir directory where bundled packages are placed\n * @return {Promise} a promise that is fulfilled when the package is bundled\n */\nfunction bundlePackage(pkg, outputDir) {\n\tconst outPkgDir = path.join(\n\t\toutputDir,\n\t\t'node_modules',\n\t\tgetPackageTargetDir(pkg.name, pkg.version)\n\t);\n\n\ttry {\n\t\tif (fs.statSync(outPkgDir).isDirectory()) {\n\t\t\tlog.debug(`Skipping ${pkg.id} (already bundled)`);\n\t\t\treturn Promise.resolve();\n\t\t}\n\t} catch (err) {}\n\n\tlog.debug(`Bundling ${pkg.id}`);\n\n\tfs.mkdirsSync(outPkgDir);\n\n\treturn copyPackage(pkg, outPkgDir)\n\t\t.then(() => (pkg.dir = outPkgDir))\n\t\t.then(() => processPackage('pre', pkg))\n\t\t.then(() => runBabel(pkg))\n\t\t.then(() => processPackage('post', pkg))\n\t\t.then(() => log.debug(`Bundled ${pkg.id}`));\n}\n\n/**\n * Copy an NPM package to output directory.\n * @param {Object} pkg the package descriptor hash containing id, name, version\n *        and dir fields\n * @param {String} dir the output directory path\n * @return {Promise} a Promise fulfilled when the copy has been finished\n */\nfunction copyPackage(pkg, dir) {\n\tconst rawGlobs = [`${pkg.dir}/**/*`, `!${pkg.dir}/node_modules/**/*`];\n\n\tconst exclusions = config.getExclusions(pkg);\n\n\tconst globs = rawGlobs.concat(\n\t\texclusions.map(exclusion => `!${pkg.dir}/${exclusion}`)\n\t);\n\n\treturn globby(globs).then(paths => {\n\t\tconst fileFilter = path => fs.statSync(path).isFile();\n\t\tconst relativePathMapper = path => path.substring(pkg.dir.length + 1);\n\n\t\tpaths = paths.filter(fileFilter).map(relativePathMapper);\n\n\t\tconst rawPaths = globby\n\t\t\t.sync(rawGlobs)\n\t\t\t.filter(fileFilter)\n\t\t\t.map(relativePathMapper);\n\n\t\treport.packageCopy(pkg, rawPaths, paths, exclusions);\n\n\t\tconst promises = paths.map(path =>\n\t\t\tfs.copy(`${pkg.dir}/${path}`, `${dir}/${path}`)\n\t\t);\n\n\t\treturn Promise.all(promises);\n\t});\n}\n\n/**\n * Process an NPM package with the configured liferay-nmp-bundler plugins. This\n * function is called two times (known as phases) per package: one before Babel\n * runs and one after.\n * @param {String} phase 'pre' or 'post' depending on what phase we are in\n * @param {Object} pkg the package descriptor hash containing id, name, version\n *        and dir fields\n * @return {Promise} a Promise fulfilled when the process has been finished\n */\nfunction processPackage(phase, pkg) {\n\treturn new Promise((resolve, reject) => {\n\t\tconst pkgJsonPath = path.join(pkg.dir, 'package.json');\n\t\tconst pkgJson = readJsonSync(pkgJsonPath);\n\n\t\tlet state = {\n\t\t\tpkgJson: pkgJson,\n\t\t};\n\n\t\ttry {\n\t\t\tconfig.getPlugins(phase, pkg).forEach(plugin => {\n\t\t\t\tlet logger = new PluginLogger();\n\n\t\t\t\tplugin.run({pkg, config: plugin.config, log: logger}, state);\n\n\t\t\t\treport.packageProcessBundlerPlugin(phase, pkg, plugin, logger);\n\t\t\t});\n\t\t} catch (err) {\n\t\t\treject(err);\n\t\t}\n\n\t\tfs.writeFileSync(pkgJsonPath, JSON.stringify(state.pkgJson, '', 2));\n\n\t\tresolve();\n\t});\n}\n\n/**\n * Run Babel on a package.\n * @param {Object} pkg the package descriptor hash containing id, name, version\n *        and dir fields\n * @return {Promise} a Promise fulfilled when the process has been finished\n */\nfunction runBabel(pkg) {\n\t// Make a copy of the package's Babel configuration\n\tconst babelConfig = Object.assign({}, config.getBabelConfig(pkg));\n\n\t// Tune babel config\n\tbabelConfig.babelrc = false;\n\tbabelConfig.only = '**/*';\n\tif (babelConfig.sourceMaps === undefined) {\n\t\tbabelConfig.sourceMaps = true;\n\t}\n\n\t// Report a copy of the package's Babel configuration before loading plugins\n\treport.packageProcessBabelConfig(pkg, Object.assign({}, babelConfig));\n\n\t// Intercept presets and plugins to load them from here\n\tbabelConfig.plugins = config.loadBabelPlugins(\n\t\tbabelConfig.presets || [],\n\t\tbabelConfig.plugins || []\n\t);\n\tbabelConfig.presets = [];\n\n\t// Run babel through it\n\treturn globby([`${pkg.dir}/**/*.js`]).then(filePaths => {\n\t\tconst promises = filePaths.map(\n\t\t\tfilePath =>\n\t\t\t\tnew Promise(resolve => {\n\t\t\t\t\tconst logger = new PluginLogger();\n\n\t\t\t\t\tPluginLogger.set(filePath, logger);\n\n\t\t\t\t\tbabel.transformFile(\n\t\t\t\t\t\tfilePath,\n\t\t\t\t\t\tObject.assign(\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tfilenameRelative: filePath,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tbabelConfig\n\t\t\t\t\t\t),\n\t\t\t\t\t\t(err, result) => {\n\t\t\t\t\t\t\t// Generate and/or log results\n\t\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t\tlog.error(\n\t\t\t\t\t\t\t\t\t`Babel failed processing`,\n\t\t\t\t\t\t\t\t\t`${filePath.substr(\n\t\t\t\t\t\t\t\t\t\tfilePath.indexOf(pkg.id)\n\t\t\t\t\t\t\t\t\t)}:`,\n\t\t\t\t\t\t\t\t\t'it will be copied verbatim (see report file for more info)'\n\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\tlogger.error('babel', err);\n\n\t\t\t\t\t\t\t\treport.warn(\n\t\t\t\t\t\t\t\t\t'Babel failed processing some .js files: check details of Babel transformations for more info.',\n\t\t\t\t\t\t\t\t\t{unique: true}\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tconst fileName = path.basename(filePath);\n\n\t\t\t\t\t\t\t\tfs.writeFileSync(\n\t\t\t\t\t\t\t\t\tfilePath,\n\t\t\t\t\t\t\t\t\t`${result.code}\\n` +\n\t\t\t\t\t\t\t\t\t\t`//# sourceMappingURL=${fileName}.map`\n\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\tfs.writeFileSync(\n\t\t\t\t\t\t\t\t\t`${filePath}.map`,\n\t\t\t\t\t\t\t\t\tJSON.stringify(result.map)\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Report result of babel run\n\t\t\t\t\t\t\treport.packageProcessBabelRun(\n\t\t\t\t\t\t\t\tpkg,\n\t\t\t\t\t\t\t\tfilePath.substr(\n\t\t\t\t\t\t\t\t\tfilePath.indexOf(pkg.id) + pkg.id.length + 1\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tlogger\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// Get rid of logger\n\t\t\t\t\t\t\tPluginLogger.delete(filePath);\n\n\t\t\t\t\t\t\t// Resolve promise\n\t\t\t\t\t\t\tresolve();\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\t})\n\t\t);\n\n\t\treturn Promise.all(promises);\n\t});\n}\n"]}