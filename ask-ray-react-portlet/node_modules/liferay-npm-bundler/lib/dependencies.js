'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.getPackageDependencies = getPackageDependencies;

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _readJsonSync = require('read-json-sync');

var _readJsonSync2 = _interopRequireDefault(_readJsonSync);

var _resolve = require('resolve');

var _resolve2 = _interopRequireDefault(_resolve);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Recursively find the dependencies of a package and return them as
 * @param {String} basedir directory where package lives in
 * @param {Array} extraDependencies an array of package names to add to
 * 									dependencies collected from package.json
 * @return {Object} a hash of objects where key is the package id and values
 *         have the following structure:
 *           {
 *             id: <package id>,     // a unique `name@version` string
 *             name: <package name>,
 *             version: <package version>,
 *             dir: <package dir>
 *           }
 */
function getPackageDependencies(basedir) {
	var extraDependencies = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

	var pkgs = {};

	var packageJson = (0, _readJsonSync2.default)(_path2.default.join(basedir, '/package.json'));
	var pkgId = packageJson.name + '@' + packageJson.version;

	pkgs[pkgId] = {
		id: pkgId,
		name: packageJson.name,
		version: packageJson.version,
		dir: basedir
	};

	var dependencies = packageJson.dependencies || [];

	dependencies = Object.keys(dependencies);

	dependencies = dependencies.concat(extraDependencies);

	var dependencyDirs = dependencies.map(function (dependency) {
		return resolveDependencyDir(basedir, dependency);
	});

	dependencyDirs = dependencyDirs.filter(function (dependencyDir) {
		return dependencyDir != null;
	});

	dependencyDirs.forEach(function (dependencyDir) {
		var depPkgs = getPackageDependencies(dependencyDir);

		Object.keys(depPkgs).forEach(function (pkgId) {
			pkgs[pkgId] = depPkgs[pkgId];
		});
	});

	return pkgs;
}

/**
 * Resolves a dependency package and returns its directory.
 * @param {String} packageDir the base directory used for resolution
 * @param {String} dependency a package name
 * @return {String} the path of the directory containing the dependency package
 */
function resolveDependencyDir(packageDir, dependency) {
	var pkgJsonFile = _resolve2.default.sync(dependency + '/package.json', {
		basedir: packageDir
	});

	return _path2.default.dirname(pkgJsonFile);
}
//# sourceMappingURL=dependencies.js.map