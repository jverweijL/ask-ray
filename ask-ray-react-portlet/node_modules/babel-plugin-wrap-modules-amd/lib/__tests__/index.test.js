'use strict';

var _babelCore = require('babel-core');

var babel = _interopRequireWildcard(_babelCore);

var _pluginLogger = require('liferay-npm-build-tools-common/lib/plugin-logger');

var _pluginLogger2 = _interopRequireDefault(_pluginLogger);

var _index = require('../index');

var _index2 = _interopRequireDefault(_index);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var logger = void 0;

beforeEach(function () {
	_pluginLogger2.default.set(__filename, logger = new _pluginLogger2.default());
});

it('logs results correctly', function () {
	var source = '\n\tconsole.log(\'Say something\');\n\tvar a = require(\'a-module\');\n\tvar b = require(\'b-module\');\n\t';

	babel.transform(source, {
		filenameRelative: __filename,
		plugins: [_index2.default]
	});

	expect(logger.messages).toMatchSnapshot();
});

it('correctly wraps modules', function () {
	var source = '\n\tconsole.log(\'Say something\');\n\tif (1 == 0) {\n\t\tconsole.log(\'Something broke in the Matrix\');\n\t}\n\tmodule.exports = \'All OK\';\n\t';

	var _babel$transform = babel.transform(source, {
		filenameRelative: __filename,
		plugins: [_index2.default]
	}),
	    code = _babel$transform.code;

	expect(code).toMatchSnapshot();
});
//# sourceMappingURL=index.test.js.map